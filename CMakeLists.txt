cmake_minimum_required(VERSION 2.8)

#set path for local find modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

include(CMakeDependentOption)
include(FeatureSummary)
include(GetGitRevisionDescription)
#standard compiler flag checking routines...
include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)
#...and wrapper with some fortran support
include(SetCompileFlag)

project(numeric C CXX Fortran)

#set output path
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# standard build targets
# For non-multi-configuration generators (eg, make, Eclipse)
# The Visual Studio and XCode generators create a single project with all these
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "For single-configuration generators (e.g. make) set the type of build: Release, Debug, RelWithDebugInfo, MinSizeRel" FORCE)
endif()
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release" "Debug" "RelWithDebugInfo" "MinSizeRel")

#override options from environment variables
if("$ENV{BUILD_VARIANT}" STREQUAL "vanilla")
  set(ENV_BUILD_VANILLA ON)
  set(ENV_BUILD_QUAD OFF)
else()
  set(ENV_BUILD_VANILLA OFF)
  set(ENV_BUILD_QUAD ON)
endif()

if("$ENV{BUILD_VARIANT}" STREQUAL "full")
  set(ENV_USE_ARMADILLO ON)
  set(ENV_USE_BLAS ON)
  set(ENV_USE_BOOST ON)
  set(ENV_USE_BOOST_MPREAL ON)
  set(ENV_USE_BOOST_UBLAS ON)
  set(ENV_USE_CILK ON)
  set(ENV_USE_EIGEN ON)
  set(ENV_USE_MPREAL ON)
  set(ENV_USE_MTL ON)
  set(ENV_USE_OPENMP ON)
  set(ENV_USE_PTHREADS ON)
  set(ENV_USE_TBB ON)
  set(ENV_USE_TCMALLOC ON)
else()
  set(ENV_USE_ARMADILLO OFF)
  set(ENV_USE_BLAS OFF)
  set(ENV_USE_BOOST ON)
  set(ENV_USE_BOOST_MPREAL ON)
  set(ENV_USE_BOOST_UBLAS OFF)
  set(ENV_USE_CILK OFF)
  set(ENV_USE_EIGEN OFF)
  set(ENV_USE_MPREAL OFF)
  set(ENV_USE_MTL OFF)
  set(ENV_USE_OPENMP OFF)
  set(ENV_USE_PTHREADS OFF)
  set(ENV_USE_TBB OFF)
  set(ENV_USE_TCMALLOC OFF)
endif()

if("$ENV{BUILD_VARIANT}" STREQUAL "basic")
  #everything is default anyway
endif()

if(DEFINED ENV{BLAS_VENDOR})
  set(ENV_BLAS_VENDOR "$ENV{BLAS_VENDOR}")
else()
  set(ENV_BLAS_VENDOR "All")
endif()

#build options
option(BUILD_APPS           "build quest apps"         ON )
option(BUILD_APPS_C         "build C variants of functions for quest apps"         ON )
option(BUILD_APPS_FORTRAN   "build Fortran variants of functions for quest apps"         ON )
option(BUILD_THREADING      "build code that uses multithreading"  ON)
option(BUILD_FASTMATH       "enable non-IEEE754 compliant fp compiler optimisations(in Release mode)"   ON)
option(BUILD_QUAD           "enable quad precision(128 bit) support"    ${ENV_BUILD_QUAD})
option(BUILD_VANILLA        "build without any external dependencies"      ${ENV_BUILD_VANILLA} )
#option(BUILD_GPGPU         "build with GPGPU libraries"     OFF)

#threading options
cmake_dependent_option(USE_PTHREADS       "enable POSIX threads support"      ${ENV_USE_PTHREADS} "BUILD_THREADING" OFF)
cmake_dependent_option(USE_OPENMP         "enable OpenMP threads support"    ${ENV_USE_OPENMP} "BUILD_THREADING" OFF)
cmake_dependent_option(USE_TBB            "enable Intel TBB threads support"  ${ENV_USE_TBB} "BUILD_THREADING; NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_CILK           "enable Cilk Plus language extension"  ${ENV_USE_CILK} "BUILD_THREADING; NOT BUILD_VANILLA" OFF)

#utility libs options
cmake_dependent_option(USE_BOOST          "enable some utility libraries from Boost suite(filesystem, system, program_options)" ${ENV_USE_BOOST} "NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_TCMALLOC       "use google tcmalloc instead of default one"  ${ENV_USE_TCMALLOC} "NOT BUILD_VANILLA" OFF)

#math libs options
cmake_dependent_option(USE_MPREAL         "enable MPFR C++ interface support" ${ENV_USE_MPREAL} "NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_BOOST_MPREAL   "use Boost.multiprecision as MPFR wrapper instead of mpfr++ one" ${ENV_USE_BOOST_MPREAL} "USE_BOOST; USE_MPREAL; NOT BUILD_VANILLA" OFF)

#blas variants(for benchmarks, comparsion and reference)
cmake_dependent_option(USE_BLAS           "enable blas-conforming library support(set BLAS_VENDOR for specific variant)" ${ENV_USE_BLAS} "NOT BUILD_VANILLA" OFF)
set(BLAS_VENDOR "${ENV_BLAS_VENDOR}" CACHE STRING "if USE_BLAS set, find and use specific vendor of blas library, one of: Any,Generic,Open,Goto,ATLAS,PhiPACK,CXML,DXML,SunPerf,SCSL,SGIMATH,IBMESSL,Intel10_32 (intel mkl v>=10 32 bit),Intel10_64lp (intel mkl v>=10 64 bit,lp thread model, lp64 model), Intel10_64lp_seq (intel mkl v>=10 64 bit,sequential code, lp64 model), Intel( older versions of mkl 32 and 64 bit), ACML,ACML_MP,ACML_GPU,Apple,NAS")
set_property(CACHE BLAS_VENDOR PROPERTY STRINGS "All" "Generic" "Open" "Goto" "ATLAS" "PhiPACK" "CXML" "DXML" "SunPerf" "SCSL" "SGIMATH" "IBMESSL" "Intel10_32" "Intel10_64lp" "Intel10_64lp_seq" "Intel" "ACML" "ACML_MP" "ACML_GPU" "Apple" "NAS" )
#templated blas analogs
cmake_dependent_option(USE_MTL            "enable MTL4 library support" ${ENV_USE_MTL} "NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_BOOST_UBLAS    "enable Boost uBLAS library support" ${ENV_USE_BOOST_UBLAS} "NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_EIGEN          "enable Eigen library support" ${ENV_USE_EIGEN} "NOT BUILD_VANILLA" OFF)
cmake_dependent_option(USE_ARMADILLO      "enable Armadillo library support" ${ENV_USE_ARMADILLO} "NOT BUILD_VANILLA" OFF)

#gpgpu blas variants
#cmake_dependent_option(USE_CUBLAS      "enable NVIDIA cuBLAS CUDA library support" OFF "NOT BUILD_VANILLA" OFF)
#cmake_dependent_option(USE_NVBLAS      "enable NVIDIA NVBLAS CUDA library support" OFF "NOT BUILD_VANILLA" OFF)
#cmake_dependent_option(USE_CLBLAS      "enable AMD clBLAS OpenCL library support" OFF "NOT BUILD_VANILLA" OFF)

#generic compiler options

# setup tooling for LLVM
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#fortranism
if(NOT CMAKE_Fortran_COMPILER_SUPPORTS_F90)
  message(FATAL_ERROR "Fortran compiler ${CMAKE_Fortran_COMPILER} does not support F90")
endif()

#more fortranisms
include(SetFortranFlags)

#c[++]
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED OFF)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED OFF)

if(MSVC)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Wall")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Wall")
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Ox /GL")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /GL")
else()
  #compiling with C[++]11 dialect is slightly more painful for cmake versions older than 3.1
  if("${CMAKE_VERSION}" VERSION_LESS "3.1")
    CHECK_CXX_COMPILER_FLAG("-std=gnu++11" COMPILER_SUPPORTS_GNUXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_GNUXX11)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
    elseif(COMPILER_SUPPORTS_CXX11)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    elseif(COMPILER_SUPPORTS_CXX0X)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
      message(FATAL_ERROR "Compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
    endif()
    CHECK_C_COMPILER_FLAG("-std=gnu11" COMPILER_SUPPORTS_GNU11)
    CHECK_C_COMPILER_FLAG("-std=c11" COMPILER_SUPPORTS_C11)
    CHECK_C_COMPILER_FLAG("-std=c1x" COMPILER_SUPPORTS_C1X)
    if(COMPILER_SUPPORTS_GNU11)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu11")
    elseif(COMPILER_SUPPORTS_C11)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
    elseif(COMPILER_SUPPORTS_C0X)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c1x")
    else()
      message(FATAL_ERROR "Compiler ${CMAKE_C_COMPILER} has no C11 support.")
    endif()
  endif()

  if(NOT BUILD_FASTMATH)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -pedantic")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic")
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -march=native -mtune=native -mfpmath=sse")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native -mfpmath=sse")
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -flto -fuse-linker-plugin -ffat-lto-objects ")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto -fuse-linker-plugin -ffat-lto-objects ")
#    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fopt-info")
  endif()
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -ipo -restrict -xHost -static-intel")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ipo -restrict -xHost -static-intel ")
#    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -qopt-report=5 -qopt-report-phase=cg,loop,vec -qopt-report-routine=dgemm  -qopt-report-file=report.lst")
  endif()
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
#    add_compile_options(-flto -emit-llvm)
  endif()
endif()

find_package(StandardMathLibrary REQUIRED)
if(StandardMathLibrary_FOUND)
    set(common_LIBS ${common_LIBS} ${STANDARD_MATH_LIBRARY})
else()
  message("-- Could NOT link to the standard math library.")
endif()

find_package(RestrictKeywordCXX)
if(RestrictKeywordCXX_FOUND)
    set(HAVE_RESTRICT YES)
else()
    message("-- Could NOT find any usable variant of restrict keyword")
endif()

find_package(ForceInlineKeywordCXX)
if(ForceInlineKeywordCXX_FOUND)
  set(HAVE_FORCEINLINE YES)
else()
    message("-- Could NOT find any usable variant of keyword to force inlining")
endif()

include(GetHostCacheLineSize)

set(app_LIBS numeric calcapp)

#info options

#if we're in git tree, get revision
get_git_head_revision(INFO_GIT_REFSPEC INFO_GIT_SHA1)
set(INFO_BUILD_OPTIONS "")
set(INFO_HAVE_OPTIONS "")

#build options

if(BUILD_THREADING)
  set(INFO_BUILD_OPTIONS "${INFO_BUILD_OPTIONS} THREADING")
endif()

if(BUILD_QUAD)
  if(USE_BOOST)
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Qoption,cpp,--extended_float_type")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qoption,cpp,--extended_float_type")
    endif()
    find_package(Quadmath)
    if(QUADMATH_FOUND)
      set(common_LIBS ${common_LIBS} ${QUADMATH_LIB})
      set(HAVE_QUADMATH YES)
      set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} QUADMATH")
      set(INFO_BUILD_OPTIONS "${INFO_BUILD_OPTIONS} QUAD")
    else()
      message("-- Could NOT find support for quad precision math")
      unset(BUILD_QUAD)
    endif()
  else()
    message("-- Could NOT use quad precision math without boost")
    message("-- manual detection of quad type is not available yet.")
    message("-- enable boost(via i.e. -DUSE_BOOST=YES) to autodetect and correctly wrap compiler-specific quad precision floats and corresponding math functions")
    unset(BUILD_QUAD)
  endif()
endif()

if(BUILD_FASTMATH)
  set(INFO_BUILD_OPTIONS "${INFO_BUILD_OPTIONS} FASTMATH")
    if(MSVC)
        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /fp:fast")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /fp:fast")
    else()
        if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
          add_compile_options(-fast) # -fast implies -static which we don't want to appear on the linker commandline
          set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -no-prec-div -fp-model fast=2")
          set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -no-prec-div -fp-model fast=2")
#          set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -parallel") # enables -qopt-matmul which is dirty cheating
#          set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -parallel") # enables -qopt-matmul which is dirty cheating
#          set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fast -fpie -pie")
#          set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fast -fpie -pie")
        else()
          set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Ofast")
          set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast")
        endif()
    endif()
endif()

if(BUILD_APPS)
  set(INFO_BUILD_OPTIONS "${INFO_BUILD_OPTIONS} APPS")
endif()

if(BUILD_VANILLA)
  set(INFO_BUILD_OPTIONS "${INFO_BUILD_OPTIONS} VANILLA")
endif()

#threading options

if (USE_PTHREADS)
  find_package(Threads)
    if(Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)
        set(common_LIBS ${common_LIBS} ${CMAKE_THREAD_LIBS_INIT})
        set(HAVE_PTHREADS YES)
        set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} PTHREADS")
    else()
        message("-- Could NOT find pthreads")
    endif()
endif()

if (USE_OPENMP)
  find_package(OpenMP)
  if(OPENMP_FOUND)
    find_package(OpenMP_Fortran)
    if(OpenMP_Fortran_FOUND)
      set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(HAVE_OPENMP YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} OPENMP")
  else()
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
      message("-- Note that there was no official OpenMP support in clang until 3.7")
    endif()
  endif()
endif()

if (USE_TBB)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(TBB_USE_DEBUG_BUILD TRUE)
  else()
    set(TBB_USE_DEBUG_BUILD FALSE)
  endif()
  find_package(TBB)
  if(TBB_FOUND)
    include_directories(${TBB_INCLUDE_DIRS})
    set(common_LIBS ${common_LIBS} ${TBB_LIBRARIES})
    add_definitions(${TBB_DEFINITIONS})
    set(HAVE_TBB YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} TBB")
  else()
    message("-- Could NOT find Intel TBB libraries")
  endif()
endif()

if (USE_CILK)
  find_package(Cilk)
  if(CILK_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Cilk_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Cilk_CXX_FLAGS}")
    set(HAVE_CILK YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} CILK")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
      add_compile_options(-cilk-serialize)
      message("... icpc 16.0.0.109 Build 20150815 crashes during cilk processing, cilk temporary disabled for intel compiler")
    endif()
  else()
    message("-- Could NOT find Intel Cilk Plus extension")
  endif()
endif()

#utility libs options

if (USE_BOOST)
   find_package(Boost COMPONENTS program_options filesystem system )
   if(Boost_FOUND)
     include_directories(${Boost_INCLUDE_DIRS})
     set(calcapp_LIBS ${Boost_LIBRARIES} ${calcapp_LIBS})
     set(HAVE_BOOST YES)
     set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} BOOST")
   else()
     message(FATAL_ERROR "-- Could NOT find Boost library")
   endif()
endif()

if (USE_TCMALLOC)
    find_package(tcmalloc)
    if(TCMALLOC_FOUND)
        include_directories(${TCMALLOC_INCLUDE_DIRS})
        set(common_LIBS ${common_LIBS} ${TCMALLOC_LIBRARIES})
        set(HAVE_TCMALLOC YES)
    else()
        message("-- Could NOT find tcmalloc")
    endif()
endif()

#math libs options

if (USE_MPREAL)
    find_package(GMP)
    find_package(MPFR)
    if(GMP_FOUND AND MPFR_FOUND)
        include_directories(${GMP_INCLUDES})
        include_directories(${MPFR_INCLUDES})
        include_directories("${CMAKE_SOURCE_DIR}/contrib/mpfrc++")
        set(common_LIBS ${common_LIBS} ${GMP_LIBRARIES} ${MPFR_LIBRARIES})
        set(HAVE_MPREAL YES)
        set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} MPREAL")
        if (USE_BOOST_MPREAL AND HAVE_BOOST)
          set(HAVE_BOOST_MPREAL YES)
          set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} BOOST_MPREAL")
        endif()
    else()
        message("-- Could NOT use mpreal wrapper due to missing prerequisites")
    endif()
endif()

#blas variants(for benchmarks, comparsion and reference)
if (USE_BLAS)
  if(BLAS_VENDOR STREQUAL "Open")
    #FindBLAS do not support OpenBLAS
    find_package(OpenBlas)
    if(OPENBLAS_FOUND)
      set(common_LIBS ${common_LIBS} ${OPENBLAS_LIBRARY})
      set(HAVE_BLAS YES)
      set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} BLAS")
    else()
      message("-- Could NOT find blas library")
    endif()
  else()
    set(BLA_VENDOR ${BLAS_VENDOR})
    find_package(BLAS)
    if(BLAS_FOUND)
      set(common_LIBS ${common_LIBS} ${BLAS_LIBRARIES})
      set(HAVE_BLAS YES)
      set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} BLAS")
    else()
      message("-- Could NOT find blas library")
    endif()
  endif()
endif()

#templated blas analogs
if (USE_MTL)
  find_package(MTL4)
  if(MTL4_FOUND)
    include_directories(${MTL4_INCLUDE_DIRS})
    set(common_LIBS ${common_LIBS} ${MTL4_LIBRARIES})
#    add_definitions(${MTL4_DEFINITIONS}) # we want to test MTL's version of routines, not BLAS one
    set(HAVE_MTL YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} MTL")
  else()
    message("-- Could NOT find Matrix Template Library")
  endif()
endif()

if (USE_BOOST_UBLAS)
  if(NOT Boost_FOUND)
    find_package(Boost)
  endif()
  if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    set(HAVE_BOOST_UBLAS YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} BOOST_UBLAS")
  else()
    message("-- Could NOT find Boost.uBLAS headers")
  endif()
endif()

if(USE_EIGEN)
  find_package(Eigen3)
  if(EIGEN3_FOUND)
    include_directories(${EIGEN3_INCLUDE_DIR})
    set(HAVE_EIGEN YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} EIGEN")
  else()
    message("-- Could NOT find Eigen headers")
  endif()
endif()

if(USE_ARMADILLO)
  find_package(Armadillo)
  if(ARMADILLO_FOUND)
    include_directories(${ARMADILLO_INCLUDE_DIRS})
    set(common_LIBS ${common_LIBS} ${ARMADILLO_LIBRARIES})
    set(HAVE_ARMADILLO YES)
    set(INFO_HAVE_OPTIONS "${INFO_HAVE_OPTIONS} ARMADILLO")
  else()
    message("-- Could NOT find Armadillo library")
  endif()
endif()

feature_summary(WHAT ALL)
#feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES VAR INFO_CMAKE_FEATURE_SUMMARY)

# final compiler setup

set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}" CACHE STRING "" FORCE )
set(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE}" CACHE STRING "" FORCE )
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" CACHE STRING "" FORCE )
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "" FORCE )
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" CACHE STRING "" FORCE )
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" CACHE STRING "" FORCE )

set (numeric_LIBS ${common_LIBS})
set (calcapp_LIBS ${common_LIBS} ${calcapp_LIBS})
set (app_LIBS ${common_LIBS} ${app_LIBS})

set(INFO_COMMON_LIBS ${common_LIBS})
set(INFO_CALCAPP_LIBS ${calcapp_LIBS})
set(INFO_APP_LIBS ${app_LIBS})
get_directory_property(COMPILE_OPTIONS COMPILE_OPTIONS)
string (REPLACE ";" " " INFO_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
string (REPLACE ";" " " INFO_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
string (REPLACE ";" " " INFO_COMPILE_OPTIONS "${COMPILE_OPTIONS}")

#prepare general includes
add_subdirectory(include)
include_directories("${CMAKE_BINARY_DIR}/include" "${CMAKE_SOURCE_DIR}/src")
#build generic parts
add_subdirectory(src)
#build task-specific apps
if (BUILD_APPS)
  add_subdirectory(apps)
endif()


